+-----------------------------+
| Bag<T>                      |
| <<implements Iterable<T>>   |
+-----------------------------+
| - first : Node              |
| - num : int                 |
+-----------------------------+
| + add(item: T) : void       |
| + remove(item: T) : void    |
| + contains(item: T) : boolean
| + count() : int             |
| + iterator() : Iterator<T>  |
+-----------------------------+

+-----------------------------+
| Node<T>                        |
+-----------------------------+
| - item : T                  |
| - next : Node               |
+-----------------------------+

Bag Pseudocode:


#####
Class Bag (type T)
   variable first : Node
   variable num : integer

   #####
   function add(item : T)
   	create Node node
      node.item = item
      node.next = first
      first = node
      num = num + 1
   end function

   #####
   function remove(item : T)
      // Check for empty bag
      if first is null: return

      create Node current = first.next
      create Node previous = first

      while current != null
         if current.item == item

            // Remove the current node
            set previous.next = current.next
            
            // Decrement the list count
	    set num = num - 1

            // End the loop
            return
         
         // advance to next node
         set previous = current
         set current = current.next
   end function
   
   #####
   function contains(item : T) : boolean
      create Node current = first
      
      while current != null
         if current.item = item
         	return true
         
         // advance node
         set current = current.next
        
      // return false if not found
      return false
   end function
   
   #####
   function count(item : T) : int
      create int c = 0
      create Node current = first
      
      while current != null
      
      	// increment the counter
      	if current.item == item
      	   set c = c + 1
      	
      	// advance node
      	set current = current.next
      
      // return the count of item
      return c
   end function
	
end class

#####
Class Node (type T)
   variable item : T
   variable next : Node
end class


Class BagTest
   function printBag(bag : Bag)
      for each item in bag
         print item
   end function
   
   function containsTest(myString : String, myBag : Bag)
      if myBag.contains(myString)
         print "Bag contains {myString}"
      else
   	     print "Bag does not contain {myString}"
   end function
   
   function countTest(myString : String, myBag : Bag)
      print "Bag contains {myBag.count()} occurrences of '{myString}'"
   end function
        
   function main
	   // Create instance of the bag class
	   create Bag myBag : String
	   
	   // For convenience, create an array with an assortment of strings to add to the bag
	   create Array wordList : String = {"this", "is", "a", "test", "a", "is", "this", "is"}
	   
	   // Add all words to the bag
	   for each item in wordList
	      myBag.add(item)
	 
	   // Print the bag contents
	   printBag(myBag)
	   
	   // Test "contains" method
	   containsTest("test", myBag)
	   containsTest("a", myBag)
	   containsTest("not", myBag)
	   containsTest("and", myBag)
	   
	   // Test count method
	   countTest("this", myBag)
	   countTest("is", myBag)
	   
	   // Remove element
	   myBag.remove("is")
	   
	   // Print the bag
	   printBag(myBag)
	   
	   // Test contains method
	   containsTest("is", myBag)
	   
	   // Test count method
	   countTest("is", myBag)
   end function
   
   
   
   
   
   
   











